// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–∞–ª–æ–Ω–∞
const SALON_CONFIG = {
    workingHours: {
        start: 9,  // 9:00
        end: 21,   // 21:00
        break: { start: 13, end: 14 } // –û–±–µ–¥ 13:00-14:00
    },
    slotDuration: 30, // 30 –º–∏–Ω—É—Ç
    masters: 1 // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∞—Å—Ç–µ—Ä–æ–≤
};

// –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
document.addEventListener('DOMContentLoaded', function() {
    initApp();
});

function initApp() {
    loadAppointments();
    setupEventListeners();
    loadTelegramConfig();
    
    // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π –¥–∞—Ç—ã
    const today = new Date().toISOString().split('T')[0];
    document.getElementById('date').min = today;
    
    // –ï—Å–ª–∏ —Å–µ–≥–æ–¥–Ω—è –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –µ–≥–æ
    const todayDate = new Date();
    if (todayDate.getDay() === 0) { // 0 = –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ
        todayDate.setDate(todayDate.getDate() + 1);
        document.getElementById('date').min = todayDate.toISOString().split('T')[0];
    }
}

function setupEventListeners() {
    // –ò–∑–º–µ–Ω–µ–Ω–∏–µ –¥–∞—Ç—ã - –æ–±–Ω–æ–≤–ª—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ–µ –≤—Ä–µ–º—è
    document.getElementById('date').addEventListener('change', function() {
        updateTimeSlots();
    });
    
    // –ò–∑–º–µ–Ω–µ–Ω–∏–µ —É—Å–ª—É–≥–∏ - –æ–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
    document.getElementById('service').addEventListener('change', function() {
        updateTimeSlots();
    });
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤
function updateTimeSlots() {
    const date = document.getElementById('date').value;
    const service = document.getElementById('service');
    const timeSelect = document.getElementById('time');
    const infoDiv = document.getElementById('timeSlotsInfo');
    
    if (!date || !service.value) {
        timeSelect.innerHTML = '<option value="">–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –∏ —É—Å–ª—É–≥—É</option>';
        infoDiv.innerHTML = '';
        return;
    }
    
    const selectedDate = new Date(date + 'T00:00:00');
    const dayOfWeek = selectedDate.getDay();
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ
    if (dayOfWeek === 0) {
        timeSelect.innerHTML = '<option value="">–í—ã—Ö–æ–¥–Ω–æ–π –¥–µ–Ω—å</option>';
        infoDiv.innerHTML = '‚ùå –í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ - –≤—ã—Ö–æ–¥–Ω–æ–π –¥–µ–Ω—å';
        return;
    }
    
    const serviceDuration = parseInt(service.options[service.selectedIndex].dataset.duration) || 60;
    const availableSlots = getAvailableTimeSlots(date, serviceDuration);
    
    timeSelect.innerHTML = '';
    
    if (availableSlots.length === 0) {
        timeSelect.innerHTML = '<option value="">–ù–µ—Ç —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏</option>';
        infoDiv.innerHTML = '‚ùå –ù–∞ —ç—Ç—É –¥–∞—Ç—É –Ω–µ—Ç —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏';
    } else {
        timeSelect.innerHTML = '<option value="">–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è</option>';
        availableSlots.forEach(slot => {
            const option = document.createElement('option');
            option.value = slot.time;
            option.textContent = `${slot.time} (${slot.duration} –º–∏–Ω)`;
            option.disabled = !slot.available;
            timeSelect.appendChild(option);
        });
        infoDiv.innerHTML = `‚úÖ –î–æ—Å—Ç—É–ø–Ω–æ ${availableSlots.length} –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤`;
    }
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤
function getAvailableTimeSlots(date, duration) {
    const appointments = JSON.parse(localStorage.getItem('manicureAppointments')) || [];
    const dayAppointments = appointments.filter(apt => apt.date === date);
    
    const slots = [];
    const startHour = SALON_CONFIG.workingHours.start;
    const endHour = SALON_CONFIG.workingHours.end;
    const breakStart = SALON_CONFIG.workingHours.break.start;
    const breakEnd = SALON_CONFIG.workingHours.break.end;
    
    for (let hour = startHour; hour < endHour; hour++) {
        for (let minute = 0; minute < 60; minute += SALON_CONFIG.slotDuration) {
            const slotTime = `${hour.toString().padStart(2, '0')}:${minute.toString().padStart(2, '0')}`;
            const slotDateTime = new Date(`${date}T${slotTime}:00`);
            
            // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –æ–±–µ–¥–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è
            if (hour >= breakStart && hour < breakEnd) {
                continue;
            }
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –≤—ã—Ö–æ–¥–∏—Ç –ª–∏ —É—Å–ª—É–≥–∞ –∑–∞ —Ä–∞–±–æ—á–∏–µ —á–∞—Å—ã
            const endTime = new Date(slotDateTime.getTime() + duration * 60000);
            const endHour = endTime.getHours();
            const endMinute = endTime.getMinutes();
            
            if (endHour > SALON_CONFIG.workingHours.end || 
                (endHour === SALON_CONFIG.workingHours.end && endMinute > 0)) {
                continue;
            }
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏—è —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏ –∑–∞–ø–∏—Å—è–º–∏
            const isAvailable = !dayAppointments.some(apt => {
                const aptStart = new Date(`${apt.date}T${apt.time}:00`);
                const aptEnd = new Date(aptStart.getTime() + (parseInt(apt.duration) || 60) * 60000);
                const slotEnd = new Date(slotDateTime.getTime() + duration * 60000);
                
                return (slotDateTime < aptEnd && slotEnd > aptStart);
            });
            
            slots.push({
                time: slotTime,
                duration: duration,
                available: isAvailable
            });
        }
    }
    
    return slots;
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ä–º—ã –∑–∞–ø–∏—Å–∏
document.getElementById('bookingForm').addEventListener('submit', function(e) {
    e.preventDefault();
    
    const phone = document.getElementById('phone').value;
    if (!isValidPhone(phone)) {
        showNotification('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞', 'error');
        return;
    }
    
    const serviceSelect = document.getElementById('service');
    const serviceDuration = serviceSelect.options[serviceSelect.selectedIndex].dataset.duration || '60';
    
    const formData = {
        id: Date.now(),
        name: document.getElementById('name').value.trim(),
        phone: document.getElementById('phone').value.trim(),
        email: document.getElementById('email').value.trim(),
        service: document.getElementById('service').value,
        serviceName: serviceSelect.options[serviceSelect.selectedIndex].text,
        date: document.getElementById('date').value,
        time: document.getElementById('time').value,
        duration: serviceDuration,
        notes: document.getElementById('notes').value.trim(),
        createdAt: new Date().toLocaleString('ru-RU'),
        status: 'confirmed'
    };
    
    if (saveAppointment(formData)) {
        this.reset();
        showNotification('‚úÖ –ó–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!', 'success');
        sendTelegramNotification(formData);
    }
});

// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏
function saveAppointment(appointment) {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–Ω—è—Ç–æ –ª–∏ –≤—Ä–µ–º—è
    const appointments = JSON.parse(localStorage.getItem('manicureAppointments')) || [];
    const isSlotOccupied = appointments.some(apt => 
        apt.date === appointment.date && 
        apt.time === appointment.time &&
        apt.status !== 'cancelled'
    );
    
    if (isSlotOccupied) {
        showNotification('‚ùå –≠—Ç–æ –≤—Ä–µ–º—è —É–∂–µ –∑–∞–Ω—è—Ç–æ! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–µ –≤—Ä–µ–º—è.', 'error');
        updateTimeSlots(); // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –≤—Ä–µ–º–µ–Ω–∏
        return false;
    }
    
    appointments.push(appointment);
    localStorage.setItem('manicureAppointments', JSON.stringify(appointments));
    loadAppointments();
    return true;
}

// –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–ø–∏—Å–µ–π
function loadAppointments() {
    const appointments = JSON.parse(localStorage.getItem('manicureAppointments')) || [];
    const appointmentsList = document.getElementById('appointmentsList');
    
    // –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–ø–∏—Å–∏
    const activeAppointments = appointments.filter(apt => apt.status !== 'cancelled');
    
    if (activeAppointments.length === 0) {
        appointmentsList.innerHTML = `
            <div style="text-align: center; padding: 2rem; color: #666;">
                <p>–ó–∞–ø–∏—Å–µ–π –ø–æ–∫–∞ –Ω–µ—Ç</p>
            </div>
        `;
        return;
    }
    
    // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ –∏ –≤—Ä–µ–º–µ–Ω–∏
    activeAppointments.sort((a, b) => new Date(a.date + 'T' + a.time) - new Date(b.date + 'T' + b.time));
    
    appointmentsList.innerHTML = activeAppointments.map(appointment => `
        <div class="appointment-item">
            <h3>${getServiceName(appointment.service)}</h3>
            <p><strong>üë§ –ö–ª–∏–µ–Ω—Ç:</strong> ${appointment.name}</p>
            <p><strong>üìû –¢–µ–ª–µ—Ñ–æ–Ω:</strong> ${appointment.phone}</p>
            ${appointment.email ? `<p><strong>üìß Email:</strong> ${appointment.email}</p>` : ''}
            <p><strong>üìÖ –î–∞—Ç–∞:</strong> ${formatDate(appointment.date)}</p>
            <p><strong>‚è∞ –í—Ä–µ–º—è:</strong> ${appointment.time} (${appointment.duration} –º–∏–Ω)</p>
            ${appointment.notes ? `<p><strong>üí≠ –ü—Ä–∏–º–µ—á–∞–Ω–∏—è:</strong> ${appointment.notes}</p>` : ''}
            <p><strong>üìù –°—Ç–∞—Ç—É—Å:</strong> <span class="status-${appointment.status}">${getStatusText(appointment.status)}</span></p>
            <p style="font-size: 0.8rem; color: #888; margin-top: 0.5rem;">
                –°–æ–∑–¥–∞–Ω–∞: ${appointment.createdAt}
            </p>
            <button class="delete-btn" onclick="cancelAppointment(${appointment.id})">
                ‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å
            </button>
        </div>
    `).join('');
}

// –û—Ç–º–µ–Ω–∞ –∑–∞–ø–∏—Å–∏
function cancelAppointment(id) {
    if (confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å —ç—Ç—É –∑–∞–ø–∏—Å—å?')) {
        let appointments = JSON.parse(localStorage.getItem('manicureAppointments')) || [];
        const appointmentIndex = appointments.findIndex(apt => apt.id === id);
        
        if (appointmentIndex !== -1) {
            appointments[appointmentIndex].status = 'cancelled';
            appointments[appointmentIndex].cancelledAt = new Date().toLocaleString('ru-RU');
            localStorage.setItem('manicureAppointments', JSON.stringify(appointments));
            loadAppointments();
            showNotification('–ó–∞–ø–∏—Å—å –æ—Ç–º–µ–Ω–µ–Ω–∞', 'info');
        }
    }
}

// Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
function loadTelegramConfig() {
    const config = JSON.parse(localStorage.getItem('telegramConfig')) || {};
    document.getElementById('telegramBotToken').value = config.botToken || '';
    document.getElementById('telegramChatId').value = config.chatId || '';
}

function saveTelegramConfig() {
    const config = {
        botToken: document.getElementById('telegramBotToken').value.trim(),
        chatId: document.getElementById('telegramChatId').value.trim()
    };
    
    localStorage.setItem('telegramConfig', JSON.stringify(config));
    showNotification('–ù–∞—Å—Ç—Ä–æ–π–∫–∏ Telegram —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã', 'success');
}

async function sendTelegramNotification(appointment) {
    const config = JSON.parse(localStorage.getItem('telegramConfig')) || {};
    
    if (!config.botToken || !config.chatId) {
        console.log('Telegram –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω');
        return;
    }
    
    const message = `üìÖ –ù–æ–≤–∞—è –∑–∞–ø–∏—Å—å –Ω–∞ –º–∞–Ω–∏–∫—é—Ä!

üë§ –ö–ª–∏–µ–Ω—Ç: ${appointment.name}
üìû –¢–µ–ª–µ—Ñ–æ–Ω: ${appointment.phone}
${appointment.email ? `üìß Email: ${appointment.email}\n` : ''}
üíÖ –£—Å–ª—É–≥–∞: ${appointment.serviceName}
üìÖ –î–∞—Ç–∞: ${formatDate(appointment.date)}
‚è∞ –í—Ä–µ–º—è: ${appointment.time} (${appointment.duration} –º–∏–Ω)
${appointment.notes ? `üí≠ –ü—Ä–∏–º–µ—á–∞–Ω–∏—è: ${appointment.notes}\n` : ''}
üÜî ID –∑–∞–ø–∏—Å–∏: ${appointment.id}
‚è± –°–æ–∑–¥–∞–Ω–∞: ${appointment.createdAt}`;

    try {
        const response = await fetch(`https://api.telegram.org/bot${config.botToken}/sendMessage`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                chat_id: config.chatId,
                text: message,
                parse_mode: 'HTML'
            })
        });
        
        const result = await response.json();
        if (result.ok) {
            console.log('–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram');
        } else {
            console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram:', result);
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:', error);
    }
}

// –≠–∫—Å–ø–æ—Ä—Ç –∑–∞–ø–∏—Å–µ–π
function exportAppointments() {
    const appointments = JSON.parse(localStorage.getItem('manicureAppointments')) || [];
    const dataStr = JSON.stringify(appointments, null, 2);
    const dataBlob = new Blob([dataStr], {type: 'application/json'});
    
    const link = document.createElement('a');
    link.href = URL.createObjectURL(dataBlob);
    link.download = `appointments-${new Date().toISOString().split('T')[0]}.json`;
    link.click();
}

function clearAllAppointments() {
    if (confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –í–°–ï –∑–∞–ø–∏—Å–∏? –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å!')) {
        localStorage.removeItem('manicureAppointments');
        loadAppointments();
        showNotification('–í—Å–µ –∑–∞–ø–∏—Å–∏ —É–¥–∞–ª–µ–Ω—ã', 'info');
    }
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
function isValidPhone(phone) {
    const phoneRegex = /^[\+]?[78][-\s]?\(?\d{3}\)?[-\s]?\d{3}[-\s]?\d{2}[-\s]?\d{2}$/;
    return phoneRegex.test(phone.replace(/\s/g, ''));
}

function getServiceName(serviceCode) {
    const services = {
        'classic': 'üíÖ –ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π –º–∞–Ω–∏–∫—é—Ä',
        'apparatus': 'üîß –ê–ø–ø–∞—Ä–∞—Ç–Ω—ã–π –º–∞–Ω–∏–∫—é—Ä', 
        'gel': 'üíé –ü–æ–∫—Ä—ã—Ç–∏–µ –≥–µ–ª—å-–ª–∞–∫',
        'design': 'üé® –î–∏–∑–∞–π–Ω –Ω–æ–≥—Ç–µ–π'
    };
    return services[serviceCode] || '–£—Å–ª—É–≥–∞';
}

function formatDate(dateString) {
    const date = new Date(dateString);
    return date.toLocaleDateString('ru-RU', {
        weekday: 'long',
        year: 'numeric',
        month: 'long',
        day: 'numeric'
    });
}

function getStatusText(status) {
    const statuses = {
        'confirmed': '‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞',
        'cancelled': '‚ùå –û—Ç–º–µ–Ω–µ–Ω–∞',
        'completed': '‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–∞'
    };
    return statuses[status] || status;
}

function showNotification(message, type = 'success') {
    const notification = document.createElement('div');
    notification.style.cssText = `
        position: fixed;
        top: 20px;
        right: 20px;
        background: ${type === 'success' ? '#4CAF50' : type === 'error' ? '#f44336' : '#2196F3'};
        color: white;
        padding: 15px 20px;
        border-radius: 5px;
        box-shadow: 0 5px 15px rgba(0,0,0,0.2);
        z-index: 1000;
        animation: slideIn 0.3s ease;
    `;
    notification.textContent = message;
    
    document.body.appendChild(notification);
    
    setTimeout(() => {
        notification.style.animation = 'slideOut 0.3s ease';
        setTimeout(() => notification.remove(), 300);
    }, 3000);
}

// –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∏–ª–∏ –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–π
const style = document.createElement('style');
style.textContent = `
    @keyframes slideIn {
        from {
            transform: translateX(100%);
            opacity: 0;
        }
        to {
            transform: translateX(0);
            opacity: 1;
        }
    }
    @keyframes slideOut {
        from {
            transform: translateX(0);
            opacity: 1;
        }
        to {
            transform: translateX(100%);
            opacity: 0;
        }
    }
    .status-confirmed { color: #4CAF50; font-weight: bold; }
    .status-cancelled { color: #f44336; font-weight: bold; }
    .status-completed { color: #2196F3; font-weight: bold; }
`;
document.head.appendChild(style);